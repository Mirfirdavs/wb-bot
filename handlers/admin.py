from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime

from bot.dispatcher import dp
from bot.bot import bot
from config import Config
from services.admin_manager import admin_manager
from services.admin_reporter import AdminReporter
from services.session_manager import session_manager
from states.admin import AdminState
from keyboards.admin import AdminKeyboard
from utils.logger import logger

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in Config.ADMIN_IDS

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====

@dp.message(Command("admin"), F.chat.type == 'private')
async def cmd_admin(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await state.clear()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∞
    admin_manager.update_user_activity(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    await message.answer(
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å WB Analytics</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=AdminKeyboard.get_admin_main()
    )

@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å WB Analytics</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=AdminKeyboard.get_admin_main()
    )

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        stats_message = AdminReporter.format_stats_message()
        await callback.message.edit_text(
            stats_message,
            reply_markup=AdminKeyboard.get_stats_refresh()
        )
    except Exception as e:
        logger.error(f"Error generating stats: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=AdminKeyboard.get_back_button()
        )

@dp.callback_query(F.data == "admin_detailed_stats")
async def admin_detailed_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        df = admin_manager.get_user_stats_df()
        if df.empty:
            await callback.message.edit_text(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö",
                reply_markup=AdminKeyboard.get_back_button()
            )
            return
        
        # –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = df.nlargest(10, 'files_processed')
        message_lines = ["üèÜ <b>–¢–û–ü-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n"]
        
        for idx, (_, user) in enumerate(top_users.iterrows(), 1):
            username = user['username'] if user['username'] != "–ù–µ—Ç" else "–±–µ–∑ username"
            message_lines.append(
                f"{idx}. ID: {user['user_id']} ({username}) - "
                f"{user['files_processed']} —Ñ–∞–π–ª–æ–≤, {user['sessions']} —Å–µ—Å—Å–∏–π"
            )
        
        await callback.message.edit_text(
            "\n".join(message_lines),
            reply_markup=AdminKeyboard.get_stats_refresh()
        )
        
    except Exception as e:
        logger.error(f"Error generating detailed stats: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=AdminKeyboard.get_back_button()
        )

# ===== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• =====

@dp.callback_query(F.data == "admin_export")
async def admin_export(callback: CallbackQuery):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.edit_text(
        "üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=AdminKeyboard.get_export_options()
    )

@dp.callback_query(F.data.startswith("export_"))
async def handle_export(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    export_type = callback.data.split("_")[1]
    
    try:
        processing_msg = await callback.message.answer("‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...</b>")
        
        if export_type == "excel":
            excel_file = AdminReporter.generate_users_excel()
            file = BufferedInputFile(
                excel_file.getvalue(),
                filename=f"wb_bot_stats_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
            )
            caption = "üìä <b>–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –≤ Excel</b>"
            await callback.message.answer_document(file, caption=caption)
            
        elif export_type == "charts":
            chart_file = AdminReporter.generate_activity_chart()
            file = BufferedInputFile(
                chart_file.getvalue(),
                filename=f"wb_activity_chart_{datetime.now().strftime('%Y%m%d_%H%M')}.png"
            )
            caption = "üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"
            await callback.message.answer_photo(file, caption=caption)
        
        await processing_msg.delete()
        await callback.answer("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")
        
    except Exception as e:
        logger.error(f"Export error: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=AdminKeyboard.get_back_button()
        )

# ===== –†–ê–°–°–´–õ–ö–ê =====

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminState.waiting_broadcast_message)
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=AdminKeyboard.get_back_button()
    )

@dp.message(AdminState.waiting_broadcast_message)
async def admin_broadcast_receive(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    broadcast_text = message.text
    total_users = len(admin_manager.user_stats)
    
    await state.update_data(broadcast_text=broadcast_text)
    await message.answer(
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{broadcast_text}\n\n"
        f"<b>–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        f"<i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:</i>",
        reply_markup=AdminKeyboard.get_broadcast_confirm()
    )

@dp.callback_query(F.data == "broadcast_confirm")
async def admin_broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    
    if not broadcast_text:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    progress_msg = await callback.message.answer("‚è≥ <b>–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</b>")
    
    try:
        result = await admin_manager.send_broadcast_message(
            bot, 
            broadcast_text,
            exclude_users=Config.ADMIN_IDS  # –ù–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∞–º
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_message = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['successful']}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {result['failed']}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result['total']}\n"
        )
        
        if result['errors']:
            report_message += f"\n<code>–û—à–∏–±–∫–∏: {', '.join(result['errors'])}</code>"
        
        await progress_msg.edit_text(report_message)
        await callback.message.edit_text(
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
            reply_markup=AdminKeyboard.get_back_button()
        )
        
    except Exception as e:
        logger.error(f"Broadcast error: {e}")
        await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
    
    await state.clear()

# ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò =====

@dp.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    df = admin_manager.get_user_stats_df()
    
    if df.empty:
        await callback.message.edit_text(
            "üë• <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö</b>",
            reply_markup=AdminKeyboard.get_back_button()
        )
        return
    
    active_today = len(df[df['days_since_active'] == 0])
    new_today = len(df[df['days_since_active'].isna() | (df['days_since_active'] == 0)])
    
    message = (
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(df)}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
        f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
        f"üìÅ –°—Ä–µ–¥–Ω–µ–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {df['files_processed'].mean():.1f}\n\n"
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"
    )
    
    await callback.message.edit_text(
        message,
        reply_markup=AdminKeyboard.get_stats_refresh()
    )

# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï =====

@dp.callback_query(F.data == "admin_refresh")
async def admin_refresh(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await admin_stats(callback)

# ===== –ó–ê–ö–†–´–¢–ò–ï =====

@dp.callback_query(F.data == "admin_close")
async def admin_close(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await callback.message.delete()
    await callback.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")