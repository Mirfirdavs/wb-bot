from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    Message,
    CallbackQuery,
)
from datetime import datetime

from bot.dispatcher import dp
from services.session_manager import session_manager
from services.excel_formatter import ExcelFormatter
from services.report_generator import ReportGenerator
from keyboards.factories import KeyboardFactory
from states.analytics import AnalyticsState
from utils.logger import logger


@dp.callback_query(F.data == "get_excel")
async def send_excel_report(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ Excel –æ—Ç—á–µ—Ç–∞"""
    session = session_manager.get_session(callback.from_user.id)

    if session.final_df is None:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç!", show_alert=True)
        return

    try:
        processing_msg = await callback.message.answer(
            "‚è≥ <b>–§–æ—Ä–º–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...</b>"
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Excel
        excel_file = ExcelFormatter.apply_business_formatting(session.final_df)
        excel_buffered = BufferedInputFile(
            excel_file.getvalue(),
            filename=f"WB_Analytics_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
        )

        await processing_msg.delete()
        await callback.message.answer_document(
            excel_buffered,
            caption="üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n"
            "‚Ä¢ –í—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
            "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞",
        )

    except Exception as e:
        logger.error(f"Error generating Excel: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞")


@dp.callback_query(F.data == "get_pdf")
async def send_pdf_report(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞"""
    session = session_manager.get_session(callback.from_user.id)

    if session.final_df is None:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç!", show_alert=True)
        return

    try:
        processing_msg = await callback.message.answer(
            "‚è≥ <b>–§–æ—Ä–º–∏—Ä—É—é PDF –æ—Ç—á–µ—Ç...</b>"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ PDF
        pdf_file = ReportGenerator.generate_comprehensive_pdf(session.final_df)
        pdf_buffered = BufferedInputFile(
            pdf_file.getvalue(),
            filename=f"WB_Summary_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
        )

        await processing_msg.delete()
        await callback.message.answer_document(
            pdf_buffered,
            caption="üìà <b>–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</b>\n"
            "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫\n"
            "‚Ä¢ –¢–û–ü —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏\n"
            "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤",
        )

    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞")


@dp.callback_query(F.data == "new_calculation")
async def new_calculation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"""
    session = session_manager.get_session(callback.from_user.id)
    session.main_df = None
    session.final_df = None

    await state.set_state(AnalyticsState.waiting_for_tax)
    await callback.message.edit_text(
        "üîÑ <b>–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!</b>\n\nüìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É:",
        reply_markup=KeyboardFactory.get_tax_keyboard(),
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.document:
        await message.answer(
            "‚ö†Ô∏è <b>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É!</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    else:
        await message.answer(
            "ü§ñ <b>WB Analytics Pro Bot</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ - /start\n\n"
            "<i>–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã Wildberries –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç "
            "–∫–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.</i>"
        )
