import asyncio
import async_timeout
from io import BytesIO

from aiogram import F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext

from bot.dispatcher import dp
from bot.bot import bot
from services.session_manager import session_manager
from services.validators import FileValidator
from services.data_processor import DataProcessor
from keyboards.factories import KeyboardFactory
from states.analytics import AnalyticsState
from config import Config
from utils.logger import logger


@dp.message(AnalyticsState.waiting_for_main_file, F.document)
async def process_main_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞"""
    session = session_manager.get_session(message.from_user.id)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if not FileValidator.validate_file_size(message):
        await message.answer(
            "‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024}MB"
        )
        return

    if not FileValidator.validate_file_type(message):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)"
        )
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        doc = message.document
        file = await bot.get_file(doc.file_id)

        async with async_timeout.timeout(Config.PROCESSING_TIMEOUT):
            file_bytes = BytesIO()
            await bot.download_file(file.file_path, destination=file_bytes)
            file_bytes.seek(0)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            processing_msg = await message.answer(
                "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç...</b>"
            )

            session.main_df = DataProcessor.process_main_report(file_bytes)
            session.update_activity()

            await processing_msg.edit_text(
                "‚úÖ <b>–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                "üìä <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é:</b>\n"
                "‚Ä¢ Excel-—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: <code>–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</code>\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB"
            )

            await state.set_state(AnalyticsState.waiting_for_cost_file)

    except asyncio.TimeoutError:
        await message.answer(
            "‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!</b>\n"
            "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞—Å—Ç–∏."
        )
    except Exception as e:
        logger.error(f"Error processing main file: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:</b>\n<code>{str(e)}</code>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç—á–µ—Ç–æ–≤ Wildberries."
        )


@dp.message(AnalyticsState.waiting_for_cost_file, F.document)
async def process_cost_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    session = session_manager.get_session(message.from_user.id)

    if session.main_df is None:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç!")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if not FileValidator.validate_file_size(message):
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!")
        return

    if not FileValidator.validate_file_type(message):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        doc = message.document
        file = await bot.get_file(doc.file_id)

        async with async_timeout.timeout(Config.PROCESSING_TIMEOUT):
            file_bytes = BytesIO()
            await bot.download_file(file.file_path, destination=file_bytes)
            file_bytes.seek(0)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            processing_msg = await message.answer(
                "‚è≥ <b>–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...</b>"
            )

            session.final_df = DataProcessor.process_cost_data(
                file_bytes, session.main_df, session.tax_rate
            )
            session.update_activity()

            await processing_msg.edit_text(
                "‚úÖ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\nüìà <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:</b>",
                reply_markup=KeyboardFactory.get_analysis_keyboard(),
            )

            await state.set_state(AnalyticsState.ready_for_analysis)

    except asyncio.TimeoutError:
        await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
    except Exception as e:
        logger.error(f"Error processing cost file: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n<code>{str(e)}</code>"
        )
