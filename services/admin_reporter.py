import pandas as pd
from io import BytesIO
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from typing import List
from .admin_manager import admin_manager, UserStat


class AdminReporter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""

    @staticmethod
    def generate_users_excel() -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        df = admin_manager.get_user_stats_df()

        if df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

        output = BytesIO()

        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç
            df.to_excel(writer, sheet_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", index=False)

            # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats = admin_manager.get_bot_stats()
            stats_df = pd.DataFrame(
                [
                    {"–ú–µ—Ç—Ä–∏–∫–∞": "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ó–Ω–∞—á–µ–Ω–∏–µ": stats.total_users},
                    {"–ú–µ—Ç—Ä–∏–∫–∞": "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "–ó–Ω–∞—á–µ–Ω–∏–µ": stats.active_today},
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": stats.total_files,
                    },
                    {"–ú–µ—Ç—Ä–∏–∫–∞": "–ê–ø—Ç–∞–π–º (–¥–Ω–∏)", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{stats.uptime_days:.1f}"},
                    {
                        "–ú–µ—Ç—Ä–∏–∫–∞": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (MB)",
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{stats.memory_usage_mb:.1f}",
                    },
                ]
            )

            stats_df.to_excel(writer, sheet_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", index=False)

            # –õ–∏—Å—Ç —Å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            top_users = admin_manager.get_top_users(20)
            top_data = []
            for user in top_users:
                top_data.append(
                    {
                        "ID": user.user_id,
                        "Username": f"@{user.username}" if user.username else "–ù–µ—Ç",
                        "–ò–º—è": user.first_name or "–ù–µ—Ç",
                        "–°–µ—Å—Å–∏–π": user.sessions_count,
                        "–§–∞–π–ª–æ–≤": user.files_processed,
                        "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": user.last_activity.strftime(
                            "%Y-%m-%d %H:%M"
                        )
                        if user.last_activity
                        else "–ù–µ—Ç",
                    }
                )

            top_df = pd.DataFrame(top_data)
            top_df.to_excel(writer, sheet_name="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", index=False)

        output.seek(0)
        return output

    @staticmethod
    def generate_activity_chart() -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        df = admin_manager.get_user_stats_df()

        if df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
        df["last_activity"] = pd.to_datetime(df["last_activity"])
        daily_activity = df.groupby(df["last_activity"].dt.date).size()

        plt.figure(figsize=(12, 6))

        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        plt.subplot(1, 2, 1)
        daily_activity.tail(14).plot(kind="bar", color="skyblue")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
        plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (14 –¥–Ω–µ–π)")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        plt.xticks(rotation=45)

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ñ–∞–π–ª–∞–º
        plt.subplot(1, 2, 2)
        file_stats = df["files_processed"].value_counts().head(5)
        plt.pie(file_stats.values, labels=file_stats.index, autopct="%1.1f%%")
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º")

        plt.tight_layout()

        output = BytesIO()
        plt.savefig(output, format="png", dpi=150, bbox_inches="tight")
        plt.close()

        output.seek(0)
        return output

    @staticmethod
    def format_stats_message() -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats = admin_manager.get_bot_stats()
        df = admin_manager.get_user_stats_df()

        if not df.empty:
            avg_files_per_user = df["files_processed"].mean()
            most_active = df.loc[df["files_processed"].idxmax()]
        else:
            avg_files_per_user = 0
            most_active = None

        message = [
            "ü§ñ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>",
            "",
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {stats.total_users}",
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è:</b> {stats.active_today}",
            f"üìÅ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {stats.total_files}",
            f"üìä <b>–§–∞–π–ª–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {avg_files_per_user:.1f}",
            f"‚è∞ <b>–ê–ø—Ç–∞–π–º:</b> {stats.uptime_days:.1f} –¥–Ω–µ–π",
            f"üíæ <b>–ü–∞–º—è—Ç—å:</b> {stats.memory_usage_mb:.1f} MB",
            "",
        ]

        if most_active is not None and not pd.isna(most_active["user_id"]):
            username = (
                most_active["username"]
                if most_active["username"] != "–ù–µ—Ç"
                else "–±–µ–∑ username"
            )
            message.extend(
                [
                    "üèÜ <b>–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>",
                    f"ID: {most_active['user_id']}",
                    f"Username: {username}",
                    f"–§–∞–π–ª–æ–≤: {most_active['files_processed']}",
                    f"–°–µ—Å—Å–∏–π: {most_active['sessions']}",
                ]
            )

        return "\n".join(message)
