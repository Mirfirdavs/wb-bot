import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import pandas as pd

from config import Config
from .session_manager import session_manager
from utils.logger import logger


@dataclass
class UserStat:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    sessions_count: int = 0
    files_processed: int = 0
    last_activity: Optional[datetime] = None
    created_at: Optional[datetime] = None


@dataclass
class BotStat:
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""

    total_users: int = 0
    active_today: int = 0
    total_files: int = 0
    memory_usage_mb: float = 0.0
    uptime_days: float = 0.0


class AdminManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def __init__(self):
        self.user_stats: Dict[int, UserStat] = {}
        self.bot_start_time = datetime.now()
        self.broadcast_messages: List[dict] = []

    def update_user_activity(
        self,
        user_id: int,
        username: str = None,
        first_name: str = None,
        last_name: str = None,
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_stats:
            self.user_stats[user_id] = UserStat(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=first_name,
                created_at=datetime.now(),
            )

        self.user_stats[user_id].sessions_count += 1
        self.user_stats[user_id].last_activity = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if username:
            self.user_stats[user_id].username = username
        if first_name:
            self.user_stats[user_id].first_name = first_name
        if last_name:
            self.user_stats[user_id].last_name = last_name

    def record_file_processed(self, user_id: int):
        """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        if user_id in self.user_stats:
            self.user_stats[user_id].files_processed += 1

    def get_bot_stats(self) -> BotStat:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        now = datetime.now()
        active_today = sum(
            1
            for stat in self.user_stats.values()
            if stat.last_activity and (now - stat.last_activity) < timedelta(days=1)
        )

        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        import psutil

        process = psutil.Process()
        memory_usage = process.memory_info().rss / 1024 / 1024  # MB

        return BotStat(
            total_users=len(self.user_stats),
            active_today=active_today,
            total_files=sum(stat.files_processed for stat in self.user_stats.values()),
            memory_usage_mb=memory_usage,
            uptime_days=(now - self.bot_start_time).total_seconds() / 86400,
        )

    def get_user_stats_df(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ DataFrame"""
        if not self.user_stats:
            return pd.DataFrame()

        data = []
        for stat in self.user_stats.values():
            data.append(
                {
                    "user_id": stat.user_id,
                    "username": f"@{stat.username}" if stat.username else "–ù–µ—Ç",
                    "first_name": stat.first_name or "–ù–µ—Ç",
                    "sessions": stat.sessions_count,
                    "files_processed": stat.files_processed,
                    "last_activity": stat.last_activity.strftime("%Y-%m-%d %H:%M")
                    if stat.last_activity
                    else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    "days_since_active": (datetime.now() - stat.last_activity).days
                    if stat.last_activity
                    else None,
                }
            )

        return pd.DataFrame(data)

    def get_top_users(self, limit: int = 10) -> List[UserStat]:
        """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        sorted_users = sorted(
            self.user_stats.values(), key=lambda x: x.files_processed, reverse=True
        )
        return sorted_users[:limit]

    async def send_broadcast_message(
        self, bot, message_text: str, exclude_users: List[int] = None
    ) -> Dict[str, int]:
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        exclude_users = exclude_users or []
        successful = 0
        failed = 0
        errors = []

        for user_id, user_stat in self.user_stats.items():
            if user_id in exclude_users:
                continue

            try:
                await bot.send_message(user_id, f"üì¢ {message_text}", parse_mode="HTML")
                successful += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã

            except Exception as e:
                failed += 1
                errors.append(f"User {user_id}: {str(e)}")
                logger.error(f"Broadcast failed for {user_id}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—Ä–∞—Å—Å—ã–ª–∫—É
        self.broadcast_messages.append(
            {
                "timestamp": datetime.now(),
                "message": message_text,
                "successful": successful,
                "failed": failed,
                "total_users": len(self.user_stats),
            }
        )

        return {
            "successful": successful,
            "failed": failed,
            "total": len(self.user_stats),
            "errors": errors[:10],  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–º–∏–Ω–∫–∏
admin_manager = AdminManager()
